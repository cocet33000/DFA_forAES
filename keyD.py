# coding: utf-8
import numpy as np
import pickle


_diff_target = 3
pears = [['532fcb4e980a429e59cc7fc1ff98b937',
          '532fcb01980acc9e59827fc15e98b937'],
         ['336fc0590c2da777d470fcd964bca65c',
          '336fc0880c2dec77d416fcd9bdbca65c'],
         ['0575c756c97478c7056df2d7372a390d',
          '0575c7a1c974e3c705fdf2d78b2a390d']]

Sbox_inv = np.array([
    0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB,
    0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB,
    0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,
    0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,
    0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,
    0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,
    0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,
    0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,
    0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,
    0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,
    0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B,
    0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,
    0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F,
    0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF,
    0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,
    0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D
])  # S-box_inv #Fig14


def split(P, j, Nk):  # 4byteごとに分割
    s1 = [int("0x" + P[i: i+j], 0) for i in range(0, len(P), j)]
    S1 = []
    for i in range(Nk):
        S1.append(s1[4*i:4*i+4])
    return S1


def create_key(i, j, mode):
    key = [[0]*4 for x in range(4)]
    if mode == 0:
        key[2][1] = i
        key[3][0] = j
    elif mode == 1:
        key[0][3] = i
        key[1][2] = j
    return key


def create_key2(A, B):
    key = [[0]*4 for x in range(4)]
    key[2][1] = A[0]
    key[3][0] = A[1]
    key[0][3] = B[0]
    key[1][2] = B[1]
    return key


def inv(A, key):
    output = []
    step1 = np.bitwise_xor(A, key)
    step2 = [[step1[0][0], step1[3][1], step1[2][2], step1[1][3]],
             [step1[1][0], step1[0][1], step1[3][2], step1[2][3]],
             [step1[2][0], step1[1][1], step1[0][2], step1[3][3]],
             [step1[3][0], step1[2][1], step1[1][2], step1[0][3]]]
    for x in step2:
        output.append(Sbox_inv[x])
    return output


def cal_diff(A, B, key, mode):
    diff = np.bitwise_xor(inv(A, key), inv(B, key))
    if mode == None:
        return diff[_diff_target]
    else:
        return diff[_diff_target][mode*2:mode*2+2]

with open('D10D.pkl', 'rb') as f:
    origin_D10 = pickle.load(f)


if __name__ == '__main__':
    guess_key = []
    for pear in pears:
        print(pear)
        cand = []
        mode0_lis = []
        mode1_lis = []
        suc = split(pear[0], 2, 4)
        fau = split(pear[1], 2, 4)
        for mode in range(2):
            D10_mode = origin_D10[:, 2*mode:2*mode+2].tolist()
            for i in range(256):
                for j in range(256):
                    diff = cal_diff(suc, fau, create_key(
                        i, j, mode), mode).tolist()
                    if diff in D10_mode:
                        if mode == 0:
                            mode0_lis.append([i, j])
                        if mode == 1:
                            mode1_lis.append([i, j])
        D10 = origin_D10.tolist()
        for A in mode0_lis:
            for B in mode1_lis:
                key = create_key2(A, B)
                diff = cal_diff(suc, fau, key, None).tolist()
                if diff in D10:
                    cand.append([key[0][3], key[1][2], key[2][1], key[3][0]])

        print(len(cand))
        guess_key.append(cand)

    with open('keyD.pkl', 'wb') as f:
        pickle.dump(guess_key, f)
